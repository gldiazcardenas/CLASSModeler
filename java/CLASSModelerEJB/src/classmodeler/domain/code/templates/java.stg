class_template(class, author, date) ::= <<
<header()>
<class.package:package()>
<documentation(author, date)>
<class.visibility.name> class <class.name><extended_types(class)><implemented_types(class)> {
<if(class.ownedAttributes)>
  
  <class.ownedAttributes: {property | <property_template(property)>}; separator={<\n>}>
<endif>
<if(class.ownedOperations)>
  
  <class.ownedOperations: {operation | <operation_template(operation)>}; separator={<\n><\n>}>
<endif>
  
}
>>
 
 
interface_template(interface, author, date) ::= <<
<header()>
<interface.package:package()>
<documentation(author, date)>
<interface.visibility.name> interface <interface.name><extended_types(interface)> {
<if(interface.ownedAttributes)>
  
  <interface.ownedAttributes: {property | <property_template(property)>}; separator={<\n>}>
<endif>
<if(interface.ownedOperations)>
  
  <interface.ownedOperations: {operation | <operation_template(operation)>}; separator={<\n><\n>}>
<endif>
  
}
>>


enumeration_template(enumeration, author, date) ::= <<
<header()>
<enumeration.package:package()>
<documentation(author, date)>
<enumeration.visibility.name> enum <enumeration.name> {
  
  <enumeration.ownedLiterals: {literal | <literal.name>}; separator={,<\n>}>
  
}
>>


property_template(property) ::= <<
  <property.visibility.name><property_modifiers(property)> <property.type.name> <property.name><if(property.default)> = <property.default><endif>;
>>


property_modifiers(property) ::= "<if(property.static)> static<endif><if(property.leaf)> final<endif>"


operation_template(operation) ::= <<
  <operation.visibility.name><operation_modifiers(operation)><if(operation.returnType)> <operation.returnType.name><endif> <operation.name>(<operation.ownedParameters: {parameter | <parameter_template(parameter)>}; separator={, }>)<if(operation.abstract)>;<endif>
  <if(!operation.abstract)>
  {
    <todo()>
  }
  <endif>
>>


operation_modifiers (operation) ::= "<if(operation.synchronized)> synchronized<endif><if(operation.abstract && operation.class_)> abstract<else><if(operation.static)> static<elseif(operation.leaf)> final<endif><endif>"


extended_types (classifier) ::= "<if(classifier.generalizations)> extends <classifier.generalizations: {generalization | <generalization.general.name>}; separator={, }><endif>"


implemented_types (class) ::= "<if(class.interfaceRealizations)> implements <class.interfaceRealizations: {realization | <realization.contract.name>}; separator={, }><endif>"


parameter_template(parameter) ::= <<
<parameter.type.name> <parameter.name>
>>


package(package) ::= <<
<if(package)>
package <package.name>;
<endif>
>>


documentation(author, date) ::= <<
/*
 * @author <author>, <date; format="short">.
 */
>>


header() ::= <<
/****************************************************
 * 
 * Universidad Francisco de Paula Santander UFPS
 * Cucuta, Colombia
 * (c) Generated by CLASS Modeler
 * 
 ****************************************************/
 
>>

todo () ::= <<
// TODO Auto-generated method stub
>>