class_template(class, author, date) ::= <<
<header()>
<class.package:package()>
<documentation(author, date)>
<class.visibility.name> interface <class.name> {
  
  <class.allAttributes: {property | <property_template(property)>}; separator={<\n>}>
  <class.allOperations: {operation | <operation_template(operation)>}; separator={<\n><\n>}>
  
}
>>
 
 
interface_template(interface, author, date) ::= <<
<header()>
<interface.package:package()>
<documentation(author, date)>
<interface.visibility.name> interface <interface.name> {
  
  <interface.allAttributes: {property | <property_template(property)>}; separator={<\n>}>
  <interface.allOperations: {operation | <operation_template(operation)>}; separator={<\n><\n>}>
  
}
>>


enumeration_template(enumeration, author, date) ::= <<
<header()>
<enumeration.package:package()>
<documentation(author, date)>
<enumeration.visibility.name> enum <enumeration.name> {
  
  <enumeration.ownedLiterals: {literal | <literal.name>}; separator={,<\n>}>
  
}
>>


property_template(property) ::= <<
  <property.visibility.name> <property.type.name> <property.name><if(property.default)> = <property.default><endif>;
>>


operation_template(operation) ::= <<
  <operation.visibility.name> <operation.type.name> <operation.name>(<operation.ownedParameters: {parameter | parameter_template(parameter)}; separator={, }>) {
    <todo()>
  }
>>


parameter_template(parameter) ::= <<
<parameter.type.name> <parameter.name>
>>


package(package) ::= <<
<if(package)>
package <package.name>;
<endif>
>>


documentation(author, date) ::= <<
/*
 * @author <author>, <date; format="short">.
 */
>>


header() ::= <<
/****************************************************
 * 
 * Universidad Francisco de Paula Santander UFPS
 * Cucuta, Colombia
 * (c) Generated by CLASSModeler
 * 
 ****************************************************/
 
>>

todo () ::= <<
// TODO Auto-generated method stub
>>